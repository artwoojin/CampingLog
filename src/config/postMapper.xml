<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="postMapper">
	<select id="getTotalPostCount" resultType="int">
		SELECT COUNT(*) FROM
		POST
	</select>

	<select id="getPostsByPage" resultType="com.camp.model.PostVO">
		SELECT * FROM (
		SELECT
		ROWNUM rn,
		p.POSTID,
		p.POSTTITLE,
		p.POSTCONTENTS,
		p.POSTIMAGE,
		p.POSTDATE,
		p.MEMBERID,
		p.CATEGORYID,
		c.CATEGORYNAME,
		NVL(l.LIKECOUNT, 0) AS
		LIKECOUNT,
		NVL(t.TAGLIST, '') AS TAGLIST
		FROM (
		SELECT * FROM POST ORDER
		BY POSTID DESC
		) p
		LEFT JOIN (
		SELECT POSTID, COUNT(*) AS LIKECOUNT
		FROM
		LIKES
		GROUP BY POSTID
		) l ON p.POSTID = l.POSTID
		LEFT JOIN (
		SELECT
		pt.POSTID, LISTAGG(t.TAGNAME, ', ') WITHIN GROUP (ORDER BY t.TAGNAME)
		AS TAGLIST
		FROM POSTTAG pt
		JOIN TAG t ON pt.TAGID = t.TAGID
		GROUP BY
		pt.POSTID
		) t ON p.POSTID = t.POSTID
		LEFT JOIN CATEGORY c ON
		p.CATEGORYID = c.CATEGORYID
		WHERE ROWNUM &lt;=
		#{end}
		)
		WHERE rn
		&gt;=
		#{start}
	</select>

	<select id="getContents" parameterType="int" resultType="com.camp.model.PostVO">
		SELECT
		c.categoryName, m.nickName, p.postId, (SELECT badgeImage FROM
		grade g
		WHERE g.gradeId=m.gradeId) badgeImage, m.memberImage, p.postTitle,
		p.postContents, p.postImage, p.postDate, (SELECT COUNT(postId) FROM
		bookmark bm
		WHERE bm.postId=p.postId ) bookmarkCount, (SELECT
		COUNT(postId) FROM likes
		l
		WHERE l.postId=p.postId ) likeCount
		FROM post
		p
		INNER JOIN member m ON
		p.memberId=m.memberId
		INNER JOIN category c ON
		p.categoryId=c.categoryId
		WHERE p.postId=#{postId}
	</select>

	<select id="getTag" parameterType="int" resultType="String">
		SELECT
		t.tagName
		FROM post p
		LEFT OUTER JOIN postTag pt ON p.postId=pt.postId
		LEFT OUTER JOIN tag t ON pt.tagId=t.tagId
		WHERE p.postId=#{postId}
	</select>

	<select id="getCategoryName" resultType="com.camp.model.PostVO">
    <![CDATA[
      SELECT CATEGORYID AS categoryId,
             CATEGORYNAME AS categoryName
        FROM CATEGORY
    ]]>
	</select>

	<select id="getPostsByCategoryPage" parameterType="map"
		resultType="com.camp.model.PostVO">
    <![CDATA[
      SELECT * FROM (
        SELECT
          ROWNUM      rn,
          p.POSTID,
          p.POSTTITLE,
          p.POSTCONTENTS,
          p.POSTIMAGE,
          p.POSTDATE,
          p.MEMBERID,
          p.CATEGORYID,
          c.CATEGORYNAME,
          NVL(l.LIKECOUNT, 0) AS LIKECOUNT,
          NVL(t.TAGLIST, '')   AS TAGLIST
        FROM (
          SELECT *
            FROM POST
           WHERE CATEGORYID = #{categoryId}
           ORDER BY POSTID DESC
        ) p
        LEFT JOIN (
          SELECT POSTID, COUNT(*) AS LIKECOUNT
            FROM LIKES
           GROUP BY POSTID
        ) l ON p.POSTID = l.POSTID
        LEFT JOIN (
          SELECT pt.POSTID,
                 LISTAGG(t.TAGNAME, ', ') 
                   WITHIN GROUP (ORDER BY t.TAGNAME) AS TAGLIST
            FROM POSTTAG pt
            JOIN TAG t ON pt.TAGID = t.TAGID
           GROUP BY pt.POSTID
        ) t ON p.POSTID = t.POSTID
        LEFT JOIN CATEGORY c ON p.CATEGORYID = c.CATEGORYID
        WHERE ROWNUM <= #{end}
      )
      WHERE rn >= #{start}
    ]]>
	</select>

	<select id="getTotalPostCountByCategory" parameterType="int"
		resultType="int">
    <![CDATA[
      SELECT COUNT(*) 
        FROM POST
       WHERE CATEGORYID = #{categoryId}
    ]]>
	</select>

	<insert id="insertPost" parameterType="com.camp.model.PostVO">
		INSERT INTO post (
		postId,
		postTitle, postContents, postImage, postDate,
		memberId, categoryId
		)
		VALUES (
		post_seq.NEXTVAL,
		#{postTitle},
		#{postContents},
		#{postImage,
		jdbcType=VARCHAR},
		SYSDATE,
		#{memberId},
		#{categoryId}
		)
	</insert>

	<select id="getLastPostId" resultType="int">
		SELECT MAX(postId) FROM
		Post
	</select>

	<select id="getPostById" resultType="com.camp.model.PostVO">
		SELECT * FROM post WHERE
		postId = #{postId}
	</select>

	<update id="updatePost" parameterType="com.camp.model.PostVO">
		UPDATE post
		SET postTitle =
		#{postTitle},
		postContents = #{postContents},
		postImage = #{postImage},
		categoryId = #{categoryId}
		WHERE postId = #{postId}
	</update>
	<delete id="deletePost" parameterType="int">
		DELETE FROM post WHERE
		postId = #{postId}
	</delete>
	<insert id="insertLike" parameterType="map">
		INSERT INTO LIKES (postId,
		memberId, likeDate)
		VALUES (#{postId}, #{memberId}, SYSDATE)
	</insert>
	<insert id="insertBookmark" parameterType="map">
	INSERT INTO bookmark (memberId, postId, bookmarkDate)
	VALUES (#{memberId}, #{postId}, SYSDATE)
	</insert>
	 <select id="getCommentCount" parameterType="int" resultType="int">
		SELECT COUNT(*) count
		FROM comments
		WHERE postId=#{postId}
	</select>
	<select id="isAlreadyBookmarked" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM bookmark
	    WHERE postId = #{postId} AND memberId = #{memberId}
	</select>
</mapper>
